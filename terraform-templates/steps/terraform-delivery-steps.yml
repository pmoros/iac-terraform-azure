parameters:
  environment: "stage"
  azureServiceConnection: "ARM_SUBSCRIPTION"
  terraformValidate: true
  terraformPlan: true
  terraformApply: false

steps:
  - task: TerraformInstaller@0
    displayName: "Install Terraform"
    inputs:
      provider: "azurerm"
      terraformVersion: "1.3.9"
      workingDirectory: "$(System.DefaultWorkingDirectory)/$(environment)"

  - task: TerraformTaskV4@4
    displayName: "Terraform Init"
    inputs:
      provider: "azurerm"
      command: init
      workingDirectory: "$(System.DefaultWorkingDirectory)/$(environment)"
      backendType: "azurerm"
      backendServiceArm: ${{ parameters.azureServiceConnection }}
      ensureBackend: true
      backendAzureRmResourceGroupName: $(terraformBackendResourceGroupName)
      backendAzureRmStorageAccountName: $(terraformBackendStorageAccountName)
      backendAzureRmContainerName: $(terraformBackendContainerName)
      backendAzureRmKey: $(terraformBackendKey)
      commandOptions: "-input=false"

  - task: TerraformTaskV4@4
    displayName: "Terraform Validate"
    condition: and(succeeded(), eq(${{ parameters.terraformValidate }}, true))
    inputs:
      provider: "azurerm"
      command: validate
      workingDirectory: "$(System.DefaultWorkingDirectory)/$(environment)"
      commandOptions: "-input=false"
      environmentServiceName: ${{ parameters.azureServiceConnection }}

  - task: TerraformTaskV4@4
    displayName: "Terraform Plan"
    condition: and(succeeded(), eq(${{ parameters.terraformPlan }}, true))
    inputs:
      provider: "azurerm"
      command: plan
      workingDirectory: "$(System.DefaultWorkingDirectory)/$(environment)"
      commandOptions: "-input=false -out=tfplan"
      environmentServiceName: ${{ parameters.azureServiceConnection }}

  - task: TerraformTaskV4@4
    displayName: "Terraform Apply"
    condition: and(succeeded(), eq(${{ parameters.terraformApply }}, true))
    inputs:
      provider: "azurerm"
      command: apply
      workingDirectory: "$(System.DefaultWorkingDirectory)/$(environment)"
      commandOptions: "-input=false tfplan"
      environmentServiceName: ${{ parameters.azureServiceConnection }}
